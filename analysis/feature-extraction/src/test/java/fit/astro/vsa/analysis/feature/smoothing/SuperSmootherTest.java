/*
 * Copyright (C) 2016 Kyle Johnston
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package fit.astro.vsa.analysis.feature.smoothing;

import fit.astro.vsa.analysis.feature.smoothing.SuperSmoother;
import fit.astro.vsa.common.bindings.math.Real2DCurve;
import fit.astro.vsa.analysis.feature.smoothing.util.SuperSmootherProperties;
import fit.astro.vsa.analysis.feature.smoothing.util.SuperSmootherResults;
import fit.astro.vsa.common.utilities.math.linearalgebra.VectorOperations;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealVector;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Kyle.Johnston
 */
public class SuperSmootherTest {

    /**
     *
     */
    public static Real2DCurve series;

    public static Real2DCurve weightedSeries;

    /**
     *
     */
    public static RealVector weights;

    /**
     *
     */
    public static RealVector result_aperiod;

    /**
     *
     */
    public static RealVector result_period;

    private static final double EPS = 1e-8;

    /**
     *
     */
    @BeforeClass
    public static void initTestFixture() {
        int size = 201;
        double[] x = VectorOperations.linearSpace(1.0, 0.0, 201);

        double[] y = new double[]{
            -0.0389046757710407, -0.0406783856625235, 0.0526463109790622,
            0.0163197696636359, 0.0680585275130811, 0.0448648557450749, 0.0884067426713955, -0.0408340787172671, 0.123126623050769, 0.204940892561321, 0.176639200377588,
            0.182611970133310, 0.137451568143533, 0.170835678372267, 0.186320614934263, 0.191222940989256, 0.157145905914098, 0.193291713865994, 0.214367610154540,
            0.211240870225158, 0.289245794825407, 0.386413188013997, 0.205380224382093, 0.289972737478407, 0.223401248993283, 0.372563925060738, 0.389804360857952,
            0.248002017267559, 0.440082031375059, 0.300377949428768, 0.377613477837119, 0.432821416918193, 0.396777779932263, 0.515684172650271, 0.549948675623199,
            0.430592143444716, 0.339612223692574, 0.427937198870079, 0.414932946600214, 0.430180919391182, 0.423040797877356, 0.494267025080316, 0.606544487459087,
            0.476197745852491, 0.508661445843585, 0.591626423761821, 0.604475861621856, 0.578558984104548, 0.615943297704835, 0.618451088854899, 0.566009379015017,
            0.616632989176839, 0.590229879734894, 0.570096488505765, 0.656634589790553, 0.637979759556698, 0.634861659995622, 0.668314009507259, 0.712520177258934,
            0.692086363499667, 0.691366328724637, 0.704720628195533, 0.702277090938826, 0.669868128911616, 0.756695176419668, 0.796454002810387, 0.707842853056985,
            0.839360059126487, 0.742468027777412, 0.747283768485533, 0.722663469300529, 0.735878947496184, 0.735678175079814, 0.808730907979297, 0.878472079394372,
            0.832454620817789, 0.856125619846966, 0.887715132902618, 0.702725216070772, 0.826273676689638, 0.859121750534254, 0.884021534962769, 0.789471607537513,
            0.810842535319528, 0.906957399081383, 0.867746368734128, 0.907244644827703, 0.837435691293066, 0.809517240271796, 0.934867553350336, 0.961932951684249,
            0.989189532261320, 0.836154460112233, 0.850955971311102, 0.848997513770607, 0.925353763670045, 0.901263719210806, 1.00220336577742, 0.868052510049760,
            0.857851592980926, 0.959249853520196, 1.01249842771058, 0.916429160125689, 0.896857439020190, 0.956091617758015, 0.885004222783486, 0.970811080594870,
            1.01432898143345, 0.986610275245733, 0.882922397666725, 0.954051965958781, 0.968146593849593, 1.07612883653368, 1.03323986433164, 0.986536493154572,
            1.05659729484523, 0.940476198617107, 0.976728341219472, 1.06604309785615, 1.07165201275747, 1.03401378633092, 1.02283886391269, 0.969645224512839,
            1.03669071104258, 0.958376015699074, 1.02869162226072, 1.01408323371107, 1.05682581034589, 0.978280210762920, 1.03093752241694, 1.03819024460931,
            0.952857279037380, 1.00467727066780, 1.07566085959672, 1.00019769370427, 0.977766605158024, 1.01449779090823, 0.976221781882082, 1.01029133494310,
            0.979398835309919, 0.983069535387003, 1.00472052754989, 1.04733855327441, 0.999205230616938, 1.05626681373050, 0.869513499754812, 0.945401018057660,
            0.976444552789160, 0.919516554786136, 0.893957557781871, 0.984937535673723, 0.980902248490176, 0.960769145452159, 0.961950950724982, 0.894394844910878,
            0.908629861952165, 0.923626124151062, 0.889868544308464, 0.936009917260148, 1.03268932601257, 0.885185890902194, 0.936397099230797, 0.846889463085721,
            0.960034032800814, 0.838905350841934, 0.891965565859988, 0.844629797955791, 0.895053123452882, 0.863777075203915, 0.854632086011009, 0.997774416884231,
            0.812172891899004, 0.834554820821588, 0.964142891826814, 0.765620222967574, 0.843439250531610, 0.754673483364965, 0.852609147667008, 0.809909257051772,
            0.818470617076435, 0.764130141068530, 0.782420024595078, 0.835753030868281, 0.640220110979182, 0.664040675930658, 0.758092168183557, 0.696078583349479,
            0.705384038602282, 0.636627408968467, 0.657392362578807, 0.673475954701712, 0.648337683783960, 0.632138929283170, 0.645100890246061, 0.609685870434431,
            0.714436703230042, 0.588342966519760, 0.718984371846857, 0.599589805116451, 0.535852387488060, 0.567538053725583};

        weights = MatrixUtils.createRealVector(VectorOperations.ones(size));
        series = new Real2DCurve(x, y);
        weightedSeries = new Real2DCurve(new ArrayRealVector(x), new ArrayRealVector(y), weights);

        result_aperiod = MatrixUtils.createRealVector(new double[]{
            -0.0337030769449705, -0.0161462317435455, 0.00141061345787945,
            0.0189674586593044, 0.0365243038607294, 0.0540811490621544, 0.0706250573795191,
            0.0862727639364743, 0.101966326578993, 0.116656038216259, 0.130348841858097,
            0.143732668468263, 0.155807493590628, 0.167622414898925, 0.179218860182866,
            0.190794230619210, 0.202759648182921, 0.214910354727871, 0.227558022787261,
            0.239281378464893, 0.251435595211254, 0.263991582995438, 0.275809807678609,
            0.288894985018782, 0.302150389718989, 0.315637386347792, 0.328423961084161,
            0.340568607477595, 0.352599179794517, 0.364104509320711, 0.375687487660965,
            0.387021155488446, 0.398301903289440, 0.409945569647238, 0.420833404565599,
            0.431452840823801, 0.442015147089609, 0.452642999890889, 0.463548218427569,
            0.474479289282803, 0.485805736281803, 0.496876669178585, 0.507966966240273,
            0.519001963408005, 0.529602205155041, 0.540105942620178, 0.550311386515949,
            0.560267122927903, 0.570435917488685, 0.580379213163029, 0.589914046545246,
            0.599121786185962, 0.608801419354890, 0.618093541035841, 0.627201349456385,
            0.636579089349395, 0.646042627950117, 0.655366341967296, 0.664471522258727,
            0.673618402162531, 0.682757071459129, 0.691969160436170, 0.700754256848338,
            0.708836150038716, 0.717015906285487, 0.725045199412018, 0.733061719416777,
            0.740542853022084, 0.747947537645385, 0.755517639070096, 0.762728448966305,
            0.769726839875216, 0.776839917002952, 0.783879332647162, 0.790728888334765,
            0.797463675140569, 0.804148905929036, 0.810365241769992, 0.816526275786561,
            0.822743845052061, 0.828627507490646, 0.834301941334729, 0.840072167127347,
            0.845354385182299, 0.850505152836568, 0.855792143953917, 0.861031063307340,
            0.866312372439227, 0.871784043338818, 0.877218519642134, 0.882413310195370,
            0.887563117448025, 0.892593735440110, 0.897340188990290, 0.902578164891866,
            0.907965333121295, 0.913257044401135, 0.918194300171439, 0.922925279255131,
            0.927323601556366, 0.931597597112624, 0.935801108521592, 0.940096769792310,
            0.944437313098914, 0.948873404780673, 0.952720573833640, 0.956086998358519,
            0.959124754646036, 0.962503714281813, 0.965665429170229, 0.968785537874262,
            0.971833384503304, 0.974722963277631, 0.977298809909214, 0.979809250346098,
            0.982106381824994, 0.984275238321055, 0.986541469092876, 0.988956897939992,
            0.991194728062628, 0.992909676055803, 0.994473022505509, 0.995851201427416,
            0.996852949109074, 0.997631324980122, 0.998389010857245, 0.998928586623830,
            0.999350982517721, 0.999442961535466, 0.999043541240352, 0.998117921375834,
            0.997089434432049, 0.995814817888365, 0.994437425521509, 0.993196305116600,
            0.991747172728716, 0.989855397713020, 0.987513955993574, 0.985167561406778,
            0.982635784393354, 0.980264616181753, 0.977658070601188, 0.975082436463258,
            0.972190968443654, 0.969115620820349, 0.966040695961335, 0.962878074359972,
            0.959669586303388, 0.956761353284155, 0.953186979589061, 0.949703574668563,
            0.945872758057505, 0.942091105928371, 0.938204614742187, 0.934320846433225,
            0.930233928302003, 0.925775643418621, 0.921443854890630, 0.916471676153101,
            0.910846215430191, 0.905247065108417, 0.899610938127533, 0.893937285963112,
            0.887869113842352, 0.881635335229191, 0.875410518479880, 0.868947936135560,
            0.862289023480757, 0.855375048735913, 0.848712790163976, 0.842415596222780,
            0.835932656099751, 0.829568803921829, 0.822920486608588, 0.815749256040771,
            0.808364070924909, 0.800487634773578, 0.792679806620577, 0.784362166844751,
            0.775680708026441, 0.766656517634880, 0.757107201906756, 0.747348246530446,
            0.736592985865698, 0.726094020897637, 0.716742913246505, 0.706946292477593,
            0.697872195410742, 0.688589111695077, 0.679626963067002, 0.670893817201360,
            0.662359831752167, 0.653935482164791, 0.645775049156375, 0.638084752602753,
            0.630164149797082, 0.621703368986754, 0.613242588176427, 0.604781807366100,
            0.596321026555773, 0.587860245745446});

        result_period = MatrixUtils.createRealVector(new double[]{
            0.0217870385105929, 0.0304656227111099, 0.0395560865443968, 0.0482888507501947, 0.0571128411257712, 0.0662092529298450, 0.0787725147289245, 0.0911063697571192,
            0.106018957227534, 0.120554306208065, 0.134140020085638, 0.148011199728288, 0.160325843260581, 0.172128227853727, 0.183274901087389, 0.194420764527281,
            0.205995377630900, 0.217627916259204, 0.230099083595900, 0.241432950499287, 0.253248404196353, 0.265525693869249, 0.276776173491087, 0.289811439493194,
            0.303345438706128, 0.317614438084412, 0.330760856737346, 0.343009827155489, 0.355414113766472, 0.366742075200151, 0.378243568001224, 0.389438756443601,
            0.400667991851372, 0.412383617770008, 0.422800605241173, 0.432517385127411, 0.442113551056039, 0.452361376502397, 0.463121577897334, 0.473889036733245,
            0.485289927145303, 0.496492916948217, 0.507661299911377, 0.518598383601279, 0.529280696331910, 0.540148701580436, 0.550862075765008, 0.561142717297189,
            0.571345794915544, 0.581213610073633, 0.590589047309407, 0.599682015083614, 0.609186267519542, 0.618361759707786, 0.627455202057352, 0.636759303434789,
            0.646139514627427, 0.655411881543648, 0.664489851641527, 0.673618402162555, 0.682757071459152, 0.691969160436128, 0.700754256848360, 0.708836150038701,
            0.717015906285530, 0.725045199412021, 0.733061719416777, 0.740542853022084, 0.747947537645383, 0.755517639070111, 0.762728448966234, 0.769726839875142,
            0.776839917003018, 0.783879332647162, 0.790728888334765, 0.797463675140481, 0.804148905929095, 0.810365241770051, 0.816526275786619, 0.822743845051919,
            0.828627507490599, 0.834301941334779, 0.840072167127284, 0.845354385182239, 0.850505152836568, 0.855792143953952, 0.861031063307271, 0.866312372439155,
            0.871784043338743, 0.877218519642277, 0.882413310195393, 0.887563117448057, 0.892593735440138, 0.897340188990315, 0.902578164891887, 0.907965333121195,
            0.913257044401135, 0.918194300171439, 0.922925279255131, 0.927323601556366, 0.931597597112624, 0.935801108521592, 0.940096769792310, 0.944437313098914,
            0.948873404780673, 0.952720573833640, 0.956086998358519, 0.959124754646036, 0.962503714281813, 0.965665429170229, 0.968785537874262, 0.971833384503304,
            0.974722963277631, 0.977298809909214, 0.979809250346098, 0.982106381824994, 0.984275238321055, 0.986541469092876, 0.988956897939992, 0.991194728062628,
            0.992909676055803, 0.994473022505509, 0.995851201427416, 0.996852949109074, 0.997631324980122, 0.998389010857068, 0.998928586623666, 0.999350982517866,
            0.999442961535626, 0.999043541240352, 0.998117921375834, 0.997089434432049, 0.995814817888365, 0.994437425521509, 0.993196305116600, 0.991747172728716,
            0.989855397713067, 0.987513955993844, 0.985167561407036, 0.982635784393274, 0.980264616181753, 0.977658070601188, 0.975082436463258, 0.972190968443654,
            0.969109156123403, 0.965965369785660, 0.962768848081336, 0.959495976021587, 0.956477471062982, 0.953008248652096, 0.949694486231409, 0.946075791175618,
            0.942368451421068, 0.938652990174807, 0.934798637493405, 0.930884099442896, 0.926647774991345, 0.922562058552399, 0.918132957898337, 0.913155933048860,
            0.908177918393940, 0.903045075126353, 0.897726193321669, 0.893020686631182, 0.887552602679799, 0.882491847576407, 0.876867410453020, 0.871468852700497,
            0.865754336067063, 0.860223375479278, 0.854827800061219, 0.848536590632936, 0.842734233933149, 0.836283964244928, 0.827663663044309, 0.819802422555877,
            0.810967807014220, 0.802672251244625, 0.793085837133180, 0.782965901585920, 0.772169783214191, 0.760948441717725, 0.749813469718875, 0.736950032705276,
            0.724932455138073, 0.715384794105772, 0.704709810005791, 0.695357113558844, 0.685495521274896, 0.676323772112434, 0.667574483407728, 0.659669781474150,
            0.652673030188327, 0.647000269895538, 0.642856250256110, 0.639433161963391, 0.637632074257928, 0.637183076624314, 0.635956020295916, 0.635230927134966,
            0.635217484434206
        });
    }

    /**
     *
     */
    @Test
    public void testingSuperSmoother_w_period() {

        SuperSmootherProperties props
                = new SuperSmootherProperties(0.0, 0.01, 0.0);

        SuperSmoother superSmoother
                = new SuperSmoother(weightedSeries, props);

        SuperSmootherResults smoothedY = superSmoother.execute();

        double distance = smoothedY.getSmo_n().getL1Distance(result_period);
        assertEquals(0.0, distance, EPS);
    }

    /**
     *
     */
    @Test
    public void testingSuperSmoother_w_aperiod() {

        SuperSmootherProperties props
                = new SuperSmootherProperties(0.0, 0.0, 0.0);

        SuperSmoother superSmoother
                = new SuperSmoother(weightedSeries, props);

        SuperSmootherResults smoothedY = superSmoother.execute();

        double distance = smoothedY.getSmo_n().getL1Distance(result_aperiod);
        assertEquals(0.0, distance, EPS);
    }

    /**
     *
     */
    @Test
    public void testingSuperSmoother_aperiod() {

        SuperSmootherProperties props
                = new SuperSmootherProperties(0.0, 0.0, 0.0);

        SuperSmoother superSmoother
                = new SuperSmoother(series, props);

        SuperSmootherResults smoothedY = superSmoother.execute();

        double distance = smoothedY.getSmo_n().getL1Distance(result_aperiod);
        assertEquals(0.0, distance, EPS);
    }

    /**
     *
     */
    @Test
    public void testingSuperSmoother_period() {

        SuperSmootherProperties props
                = new SuperSmootherProperties(0.0, 0.01, 0.0);

        SuperSmoother superSmoother
                = new SuperSmoother(series, props);

        SuperSmootherResults smoothedY = superSmoother.execute();

        double distance = smoothedY.getSmo_n().getL1Distance(result_period);
        assertEquals(0.0, distance, EPS);
    }
}
